#!/usr/bin/env node
const definitions = require('../definitions.js').registerDefinitions()
const throng = require('throng')
const dotenv = require('dotenv')
const http = require('http')
dotenv.config()

const WORKERS = process.env.WEB_CONCURRENCY || 1
process.setMaxListeners(0)

throng({
  workers: WORKERS,
  lifetime: Infinity,
  start: start
})

function start(id){
/**
 * Module dependencies.
 */
  console.log(`Started worker ${ id }`)

  var { app, app2 } = require('../app')
  var port = normalizePort('3000')
  app.set('port', port)
  var server = http.createServer(app)
  server.listen(port)

  var port2 = normalizePort('3001')
  app2.set('port', port2)
  var server2 = http.createServer(app2)
  server2.listen(port2)
  app2.set('definitions', definitions)

  console.log("get http port: ", port)
  console.log("post http port: ", port2)

  function normalizePort(val) {
    var port = parseInt(val, 10)
    if (isNaN(port)) {
    // named pipe
      return val
    }
    if (port >= 0) {
    // port number
      return port
    }
    return false
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error
    }
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
    }
  }

  function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    // debug('Listening on ' + bind)
    // console.log('Listening on ' + bind)
  }
}
